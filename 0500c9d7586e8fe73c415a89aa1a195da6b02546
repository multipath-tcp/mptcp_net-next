{
  "comments": [
    {
      "key": {
        "uuid": "0d0cecef_e424bbc0",
        "filename": "include/linux/tcp.h",
        "patchSetId": 1
      },
      "lineNbr": 420,
      "author": {
        "id": 1016277
      },
      "writtenOn": "2019-04-04T12:43:42Z",
      "side": 1,
      "message": "I think it would be nicer adding an helper alike:\n\nstatic bool tcp_sk_is_mptcp(const struct tcp_sock *tp)\n{\n      return IS_ENABLED(CONFIG_MPTCP) \u0026\u0026 tp-\u003eis_mptcp;\n}\n\nand use it instead of plain \"tp-\u003eis_mptcp\" in conditional statements, so that the compiler could optimize out the relevant branch at build time if MPTCP is not enabled",
      "range": {
        "startLine": 420,
        "startChar": 6,
        "endLine": 420,
        "endChar": 14
      },
      "revId": "0500c9d7586e8fe73c415a89aa1a195da6b02546",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83db8de7_13cc70c2",
        "filename": "include/linux/tcp.h",
        "patchSetId": 1
      },
      "lineNbr": 420,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-04-04T15:39:28Z",
      "side": 1,
      "message": "\u003e so that the compiler could optimize out the relevant branch at build time if MPTCP is not enabled\n\nsmart idea :)",
      "parentUuid": "0d0cecef_e424bbc0",
      "range": {
        "startLine": 420,
        "startChar": 6,
        "endLine": 420,
        "endChar": 14
      },
      "revId": "0500c9d7586e8fe73c415a89aa1a195da6b02546",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df6133a9_d3f5336a",
        "filename": "include/net/mptcp.h",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-04-04T15:39:28Z",
      "side": 1,
      "message": "detail: should we move this to an \"internal\" header file? In net/mptcp/mptcp_internal.h?\nTo have what is exposed to the userspace in include/uapi, to the kernel in include/net and only to mptcp in net/mptcp?\n\nIf we want to keep it here, I would suggest to prefix everything here with \u0027mptcp_\u0027. (or should we even always prefix MPTCP related functions/variables with that â†’ big detail :) )",
      "revId": "0500c9d7586e8fe73c415a89aa1a195da6b02546",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25071709_a200f89f",
        "filename": "include/net/mptcp.h",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-04-04T15:49:42Z",
      "side": 1,
      "message": "I guess here and below we will use bits. Because it is easy to change, should we maybe directly switch to bits to avoid comments on that during reviews by others?",
      "revId": "0500c9d7586e8fe73c415a89aa1a195da6b02546",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9cadbdbf_4da255b3",
        "filename": "include/net/mptcp.h",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-04-04T15:49:42Z",
      "side": 1,
      "message": "do you need a bool for the version?",
      "revId": "0500c9d7586e8fe73c415a89aa1a195da6b02546",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "287577bb_ec804e6d",
        "filename": "include/net/mptcp.h",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-04-04T15:52:16Z",
      "side": 1,
      "message": "just to be sure, this structure is shared with all subflows of the MPTCP connection, right? Not per subflow.",
      "parentUuid": "9cadbdbf_4da255b3",
      "revId": "0500c9d7586e8fe73c415a89aa1a195da6b02546",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbe9fe09_c5826581",
        "filename": "include/net/mptcp.h",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-04-04T15:49:42Z",
      "side": 1,
      "message": "should we call it tcp_sock?",
      "revId": "0500c9d7586e8fe73c415a89aa1a195da6b02546",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f5c1e6f_4335ee26",
        "filename": "include/net/mptcp.h",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-04-04T15:49:42Z",
      "side": 1,
      "message": "should we then call it mptcp_sock then? :)",
      "revId": "0500c9d7586e8fe73c415a89aa1a195da6b02546",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4564eff8_6e34e6d7",
        "filename": "include/net/mptcp.h",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-04-04T15:39:28Z",
      "side": 1,
      "message": "detail: this function seems not used.",
      "revId": "0500c9d7586e8fe73c415a89aa1a195da6b02546",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd3a99fe_f03983a0",
        "filename": "net/mptcp/protocol.c",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-04-04T15:39:28Z",
      "side": 1,
      "message": "if the bind() fails, should we clean the subflow that might have just been created?",
      "revId": "0500c9d7586e8fe73c415a89aa1a195da6b02546",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9631bfd2_886711a8",
        "filename": "net/mptcp/protocol.c",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-04-04T15:39:28Z",
      "side": 1,
      "message": "if the connect() fails, should we clean the subflow that might have just been created?",
      "revId": "0500c9d7586e8fe73c415a89aa1a195da6b02546",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3154af6_fce4c43c",
        "filename": "net/mptcp/subflow.c",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1015456
      },
      "writtenOn": "2019-04-04T16:14:59Z",
      "side": 1,
      "message": "Note for other reviewers: This does currently allow userspace to request a subflow socket using ULP. That\u0027s something we would expect to change - there used to be a way to restrict certain ULP types to only work inside the kernel, but that code was removed when BPF was refactored to use sk_msg",
      "revId": "0500c9d7586e8fe73c415a89aa1a195da6b02546",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}