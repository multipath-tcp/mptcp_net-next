{
  "comments": [
    {
      "key": {
        "uuid": "795f60f0_8db8c62d",
        "filename": "include/linux/tcp.h",
        "patchSetId": 8
      },
      "lineNbr": 125,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-03-04T16:37:50Z",
      "side": 1,
      "message": "should we prepend with \"use_\"/\"has_\" for all these bits here and above? It is strange to see \"!\u003d 0\" in the code when this prefix is not there, e.g.\n\n  opt_rx-\u003emptcp.data_fin \u003d (opt_rx-\u003emptcp.flags \u0026 0x10) !\u003d 0;",
      "revId": "a6eb97bef0590987a0a3a07d962735b05d401e9f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76db0712_4ac3d407",
        "filename": "include/linux/tcp.h",
        "patchSetId": 8
      },
      "lineNbr": 125,
      "author": {
        "id": 1015456
      },
      "writtenOn": "2019-03-06T00:08:06Z",
      "side": 1,
      "message": "Most of the names are exactly the bit names from RFC6824. I added a few more bits to represent information that\u0027s handled some other way in the MPTCP option encoding - use_ack/use_map indicate whether the ack and map-related fields are valid, and ack64/dsn64 for how to interpret the length. Another way to extract the data_fin flag would be:\n\n  opt_rx-\u003emptcp.data_fin \u003d !!(opt_rx-\u003emptcp.flags \u0026 MPTCP_FLAG_DATA_FIN);\n\nIs that any better?",
      "parentUuid": "795f60f0_8db8c62d",
      "revId": "a6eb97bef0590987a0a3a07d962735b05d401e9f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e00d3157_21bb6b77",
        "filename": "include/linux/tcp.h",
        "patchSetId": 8
      },
      "lineNbr": 125,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-03-06T09:59:46Z",
      "side": 1,
      "message": "personally, I know that we will store the ACK32 and ACK64 in the same variable (ack) but if in the code we have \"if (mptcp.ack64) { ... }\" or \"mptcp.ack64 \u003d (opt_rx-\u003emptcp.flags \u0026 0x02) !\u003d 0\" that might looks strange, maybe clearer with \"if (mptcp.is_ack64) { ... }\" and \"mptcp.is_ack64 \u003d !!(opt_rx-\u003emptcp.flags \u0026 0x02)\".\n\nSo yes, also clearer with !!.\nI don\u0027t know if we have to use the exact same names from RFC6824, maybe the context was different and it was clear there that it was a \"boolean\" (bit) while in the code it might be less obvious.\n\nBut that\u0027s a detail, I am fine without the is_/has_/use_.",
      "parentUuid": "76db0712_4ac3d407",
      "revId": "a6eb97bef0590987a0a3a07d962735b05d401e9f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f44c4fa_def24dd0",
        "filename": "net/ipv4/tcp_output.c",
        "patchSetId": 8
      },
      "lineNbr": 506,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-03-04T16:37:50Z",
      "side": 1,
      "message": "why do you need extra parenthesis here? (\"!!\" not needed?)",
      "revId": "a6eb97bef0590987a0a3a07d962735b05d401e9f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17a0c10f_1dcf7469",
        "filename": "net/ipv4/tcp_output.c",
        "patchSetId": 8
      },
      "lineNbr": 506,
      "author": {
        "id": 1015456
      },
      "writtenOn": "2019-03-06T00:08:06Z",
      "side": 1,
      "message": "I liked the way it made line 506 wrap :)\n\nI\u0027ll find a prettier way to handle these assignments.",
      "parentUuid": "5f44c4fa_def24dd0",
      "revId": "a6eb97bef0590987a0a3a07d962735b05d401e9f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da1756d8_7e1fab3e",
        "filename": "net/ipv4/tcp_output.c",
        "patchSetId": 8
      },
      "lineNbr": 506,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-03-06T09:59:46Z",
      "side": 1,
      "message": "we can also keep the parenthesis, it doesn\u0027t hurt. That\u0027s a detail as well.",
      "parentUuid": "17a0c10f_1dcf7469",
      "revId": "a6eb97bef0590987a0a3a07d962735b05d401e9f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21245b10_ab16df6a",
        "filename": "net/ipv4/tcp_output.c",
        "patchSetId": 8
      },
      "lineNbr": 530,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-03-04T16:37:50Z",
      "side": 1,
      "message": "maybe a fix for a parent commit?",
      "revId": "a6eb97bef0590987a0a3a07d962735b05d401e9f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1744e2e2_74466799",
        "filename": "net/ipv4/tcp_output.c",
        "patchSetId": 8
      },
      "lineNbr": 530,
      "author": {
        "id": 1015456
      },
      "writtenOn": "2019-03-06T00:08:06Z",
      "side": 1,
      "message": "Yes",
      "parentUuid": "21245b10_ab16df6a",
      "revId": "a6eb97bef0590987a0a3a07d962735b05d401e9f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79152bc0_4a36d559",
        "filename": "net/mptcp/options.c",
        "patchSetId": 8
      },
      "lineNbr": 266,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-03-04T16:37:50Z",
      "side": 1,
      "message": "we could also here work with the MPTCP sub-structure here",
      "range": {
        "startLine": 266,
        "startChar": 8,
        "endLine": 266,
        "endChar": 35
      },
      "revId": "a6eb97bef0590987a0a3a07d962735b05d401e9f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c3054e3_5926b58e",
        "filename": "net/mptcp/options.c",
        "patchSetId": 8
      },
      "lineNbr": 266,
      "author": {
        "id": 1015456
      },
      "writtenOn": "2019-03-06T00:08:06Z",
      "side": 1,
      "message": "It\u0027s a little complicated given the way the sub-structure is declared. I might use struct mptcp_ext within tcp_options_received so it can be passed in here and easily copied.",
      "parentUuid": "79152bc0_4a36d559",
      "range": {
        "startLine": 266,
        "startChar": 8,
        "endLine": 266,
        "endChar": 35
      },
      "revId": "a6eb97bef0590987a0a3a07d962735b05d401e9f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26c26dde_d36fc73c",
        "filename": "net/mptcp/options.c",
        "patchSetId": 8
      },
      "lineNbr": 266,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-03-06T09:59:46Z",
      "side": 1,
      "message": "\u003e It\u0027s a little complicated given the way the sub-structure is declared.\n\nSorry I didn\u0027t give enough references to a previous comment. We can declare the sub-structure in mptcp.h to expose it and it within tcp_options_received.\n\nWe can also use \"struct mptcp_(skb_)_ext\" here indeed. Something exposed, only to work with the MPTCP part here, not touching the other options.",
      "parentUuid": "3c3054e3_5926b58e",
      "range": {
        "startLine": 266,
        "startChar": 8,
        "endLine": 266,
        "endChar": 35
      },
      "revId": "a6eb97bef0590987a0a3a07d962735b05d401e9f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2198b4ff_6100d9dc",
        "filename": "net/mptcp/protocol.c",
        "patchSetId": 8
      },
      "lineNbr": 131,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-03-04T16:37:50Z",
      "side": 1,
      "message": "(detail: already discussed in another Change but should we prefix all functions/struct with \u0027mptcp_\u0027 to recognise in stacktraces/ftrace debugging?)",
      "range": {
        "startLine": 131,
        "startChar": 11,
        "endLine": 131,
        "endChar": 21
      },
      "revId": "a6eb97bef0590987a0a3a07d962735b05d401e9f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a3cabef_3989c31e",
        "filename": "net/mptcp/protocol.c",
        "patchSetId": 8
      },
      "lineNbr": 131,
      "author": {
        "id": 1015456
      },
      "writtenOn": "2019-03-06T00:08:06Z",
      "side": 1,
      "message": "I do try to use the mptcp_ prefix with larger functions, but it\u0027s common to not prefix little utility functions like this within file scope (see tcp.c)",
      "parentUuid": "2198b4ff_6100d9dc",
      "range": {
        "startLine": 131,
        "startChar": 11,
        "endLine": 131,
        "endChar": 21
      },
      "revId": "a6eb97bef0590987a0a3a07d962735b05d401e9f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49597e5a_c21832b7",
        "filename": "net/mptcp/protocol.c",
        "patchSetId": 8
      },
      "lineNbr": 131,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-03-06T09:59:46Z",
      "side": 1,
      "message": "yes, I understand. Personally in different projects, I use to start static functions with \"_\" and the non static ones with the name of the file, e.g. mptcp_protocol_.  Like that, it is easy to recognise in the code if it is an utility functions, internal to the current file or something exposed where error management could be different, we know from which file it comes, etc. But in the kernel, that\u0027s different of course.\n\nI am of course fine not to prefix these utility functions, especially these ones that will probably been inlined by the compiler.\nIt is just not to have many of these static functions in /sys/kernel/debug/tracing/available_filter_functions, maybe \"conflicting\" with others. I don\u0027t know if since FTrace and KProbe (via BPF) are more popular, maintainers prefer having more prefixes.",
      "parentUuid": "0a3cabef_3989c31e",
      "range": {
        "startLine": 131,
        "startChar": 11,
        "endLine": 131,
        "endChar": 21
      },
      "revId": "a6eb97bef0590987a0a3a07d962735b05d401e9f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f42f372_d2579a59",
        "filename": "net/mptcp/protocol.c",
        "patchSetId": 8
      },
      "lineNbr": 136,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-03-04T16:37:50Z",
      "side": 1,
      "message": "(I am a bit tired but where do you manage a possible \"overflow\" for the seq number? I guess in mptcp_recvmsg())",
      "revId": "a6eb97bef0590987a0a3a07d962735b05d401e9f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "946b8e92_28f564f3",
        "filename": "net/mptcp/protocol.c",
        "patchSetId": 8
      },
      "lineNbr": 136,
      "author": {
        "id": 1015456
      },
      "writtenOn": "2019-03-06T00:08:06Z",
      "side": 1,
      "message": "Line 137 builds the 64-bit sequence number from the lower 32 bits of \u0027seq\u0027, and the upper 32 bits of old_seq+old_dll+1\n\nThe \"+ 1\" is there to make the overflow happen, at least for the case where the beginning of the new mapping is right after the old mapping. This needs some work to use with multiple subflows where we might encounter a mapping that is from earlier or later in the sequence space.",
      "parentUuid": "8f42f372_d2579a59",
      "revId": "a6eb97bef0590987a0a3a07d962735b05d401e9f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dafc8587_52f34e07",
        "filename": "net/mptcp/protocol.c",
        "patchSetId": 8
      },
      "lineNbr": 136,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-03-06T09:59:46Z",
      "side": 1,
      "message": "OK thank you!",
      "parentUuid": "946b8e92_28f564f3",
      "revId": "a6eb97bef0590987a0a3a07d962735b05d401e9f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b297574_7cbbab49",
        "filename": "net/mptcp/protocol.c",
        "patchSetId": 8
      },
      "lineNbr": 137,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-03-04T16:37:50Z",
      "side": 1,
      "message": "detail: maybe better to use U64_MAX",
      "revId": "a6eb97bef0590987a0a3a07d962735b05d401e9f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d78c278_42ca6bdd",
        "filename": "net/mptcp/protocol.c",
        "patchSetId": 8
      },
      "lineNbr": 137,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-03-04T16:37:50Z",
      "side": 1,
      "message": "yes, it\u0027s FULL :-)",
      "range": {
        "startLine": 137,
        "startChar": 42,
        "endLine": 137,
        "endChar": 55
      },
      "revId": "a6eb97bef0590987a0a3a07d962735b05d401e9f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "644472b3_e81e4c77",
        "filename": "net/mptcp/protocol.c",
        "patchSetId": 8
      },
      "lineNbr": 137,
      "author": {
        "id": 1015456
      },
      "writtenOn": "2019-03-06T00:08:06Z",
      "side": 1,
      "message": "~0xFFFFFFFFULL \u003d\u003d 0xFFFFFFFF00000000ULL",
      "parentUuid": "9b297574_7cbbab49",
      "revId": "a6eb97bef0590987a0a3a07d962735b05d401e9f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e761a1cb_8a96d74e",
        "filename": "net/mptcp/protocol.c",
        "patchSetId": 8
      },
      "lineNbr": 137,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-03-06T09:59:46Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6d78c278_42ca6bdd",
      "range": {
        "startLine": 137,
        "startChar": 42,
        "endLine": 137,
        "endChar": 55
      },
      "revId": "a6eb97bef0590987a0a3a07d962735b05d401e9f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b77a60ba_3f995a5f",
        "filename": "net/mptcp/protocol.c",
        "patchSetId": 8
      },
      "lineNbr": 137,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-03-06T09:59:46Z",
      "side": 1,
      "message": "good point! Is it then ~U32_MAX? Or U32_MAX \u003c\u003c 32\n\nbut that\u0027s also fine, I just didn\u0027t get you wanted to work with the first half.",
      "parentUuid": "644472b3_e81e4c77",
      "revId": "a6eb97bef0590987a0a3a07d962735b05d401e9f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79248bc4_43397b41",
        "filename": "net/mptcp/protocol.c",
        "patchSetId": 8
      },
      "lineNbr": 138,
      "author": {
        "id": 1015295
      },
      "writtenOn": "2019-03-04T16:37:50Z",
      "side": 1,
      "message": "note for myself: I have to stop here :)",
      "revId": "a6eb97bef0590987a0a3a07d962735b05d401e9f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}